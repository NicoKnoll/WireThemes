<?php

/**
 * WireThemes
 *
 * By Nico Knoll (http://nico.is/)
 *
 */

class WireThemes extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => __('WireThemes'),
			'version' => '0.1.0',
			'summary' => __('A Theme Switch for Processwire.'),
			'autoload' => true
		);
	}


	/**
	 * Default configuration
	 *
	 */
	static public function getDefaultConfig() {
		return array(
			'theme' => '' // no theme by default
		);
	}

	/**
	 * Populate default configuration (will be overwritten after constructor with user's own configuration)
	 *
	 */
	public function __construct() {
		$defaultData = self::getDefaultConfig();
		$data = array_merge($defaultData, $this->getModuleConfigData($this)); 

		foreach($defaultData as $key => $value) {
			$this->$key = $value;
		}

		if($data['theme'] != '') {
			// the root templates folder
			$modulesRootUrl = wire('config')->urls->siteModules;
			$modulesRootPath = wire('config')->paths->siteModules;
		} else {
			// the root templates folder
			$modulesRootUrl = wire('config')->urls->templates;
			$modulesRootPath = wire('config')->paths->templates;
		}

		// new paths
		wire('config')->urls->set('templates', $modulesRootUrl.$data['theme'].'/');
		wire('config')->paths->set('templates', $modulesRootPath.$data['theme'].'/');
	}
	
	public function init() {
		$this->addHook('ProcessPageView::ready', $this, 'replaceFields');
	}
	
	public function replaceFields(HookEvent $event) {
		// don't do this if in backend
		if($this->page->template == 'admin') return false;
		
		$themeConfig = $this->modules->getModuleConfigData($this->theme);	
		foreach($themeConfig as $oldName => $newName) {
			$this->page->set($oldName, $this->page->{$newName});
		}
	}


	/**
	* We have to rewrite this function because wire('modules') is not loaded when this function is needed.
	* 
	*/
	public function getModuleConfigData($className) {

		if(is_object($className)) $className = $className->className();

		$database = $this->wire('database'); 
		$query = $database->prepare("SELECT data FROM modules WHERE class=:class"); // QA
		$query->bindValue(":class", (string) $className, PDO::PARAM_INT); 
		$query->execute();
		$data = $query->fetchColumn(); 
		$query->closeCursor();

		if(empty($data)) $data = array();
		else $data = wireDecodeJSON($data); 

		return $data; 	
	}



	/**
	 * Create the modules setting page
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		// this is a container for fields, basically like a fieldset
		$fields = new InputfieldWrapper();
		return $fields;
	}
	
	
	static protected function addRequiredField($fieldName, $fieldType, $fieldValue = '', $fieldLabel = '') {
		
		$selectableFields = self::getFields($fieldType);
		
		$field = wire('modules')->get('InputfieldSelect');
		$field->name = $fieldName;
		foreach($selectableFields as $selectableField) {
			$options = array();
			
			if($selectableField->name == $fieldValue) $options['checked'] = 'checked';
			elseif($selectableField->name == $fieldName && $fieldValue == '') $options['checked'] = 'checked';
			
			$field->addOption($selectableField->name, null, $options);
		}
		$field->label = $fieldLabel;
		
		return $field;
	}
	
	static protected function getFields($fieldType = '') {
		if($fieldType == '') $selector = '*';
		else $selector = 'type='.$fieldType;
		
		$fields = wire('fields')->find($selector);
		
		foreach($fields as $field) {
			if($field->flags & Field::flagSystem ) continue; //  && $field->name != 'title' probably don't needed because title is available anyway
			$return[$field->name] = $field;
		}

		return $return;
	}

	/**
	 * Define an install function which automatically gets triggered by the Themes
	 *
	 */
	final public function ___install() {
		if($this == 'WireThemes') return;
		// old data
		$data = wire('modules')->getModuleConfigData('WireThemes');

		if($data['theme'] != '') throw new WireException('You only can use one frontend theme. '.$data['theme'].' is already installed. Please uninstall it before you install this one.');

		// new data
		$data = array(
			'theme' => (string)$this
		);

		wire('modules')->saveModuleConfigData('WireThemes', $data);
	}



	/**
	* Define an uninstall function which automatically gets triggered by the Themes
	*
	*/
	final public function ___uninstall() {
		if($this == 'WireThemes') return;

		$data = array(
			'theme' => ''
		);

		wire('modules')->saveModuleConfigData('WireThemes', $data);
	}



}